use super::{Entry, Mapper};

pub struct FileGenerator {
    pub mappers: Vec<Box<dyn Mapper>>,
}

impl FileGenerator {
    pub fn generate_file(&self) -> String {
        let mut lines: Vec<String> = Vec::new();
        lines.append(&mut Self::disclaimer());

        for mapper in &self.mappers {
            if mapper.entries().is_empty() {
                continue;
            }

            lines.push(format!("# {}", mapper.name()));
            lines.append(&mut Self::to_sorted_lines(&mapper.entries()));
            lines.push("".to_owned());
        }

        lines.join("\n")
    }

    pub fn disclaimer() -> Vec<String> {
        [
            "# STOP! - DO NOT EDIT THIS FILE MANUALLY",
            "# This file was automatically generated by \"bin/codeownership validate\".",
            "#",
            "# CODEOWNERS is used for GitHub to suggest code/file owners to various GitHub",
            "# teams. This is useful when developers create Pull Requests since the",
            "# code/file owner is notified. Reference GitHub docs for more details:",
            "# https://help.github.com/en/articles/about-code-owners",
            "",
            "",
        ]
        .iter()
        .map(|line| line.to_string())
        .collect()
    }

    fn to_sorted_lines(entries: &[Entry]) -> Vec<String> {
        let mut lines: Vec<String> = entries.iter().map(|entry| entry.to_row()).collect();
        lines.sort();
        lines
    }
}
