use crate::ownership::{FileGenerator, TeamOwnership};
use std::error::Error;

pub fn team_name_from_file_path(file_path: &str, codeowners_file: &str) -> Result<Option<String>, Box<dyn Error>> {
   todo!()
}

pub fn parse_for_team(team_name: String, codeowners_file: &str) -> Result<Vec<TeamOwnership>, Box<dyn Error>> {
    let mut output = vec![];
    let mut current_section: Option<TeamOwnership> = None;
    let input: String = codeowners_file.replace(&FileGenerator::disclaimer().join("\n"), "");
    let error_message = "CODEOWNERS out of date. Run `codeowners generate` to update the CODEOWNERS file";

    for line in input.trim_start().lines() {
        match line {
            comment if comment.starts_with("#") => {
                if let Some(section) = current_section.take() {
                    output.push(section);
                }
                current_section = Some(TeamOwnership::new(comment.to_string()));
            }
            "" => {
                if let Some(section) = current_section.take() {
                    output.push(section);
                }
            }
            team_line if team_line.ends_with(&team_name) => {
                let section = current_section.as_mut().ok_or(error_message)?;

                let glob = line.split_once(' ').ok_or(error_message)?.0.to_string();
                section.globs.push(glob);
            }
            _ => {}
        }
    }

    if let Some(cs) = current_section {
        output.push(cs.clone());
    }

    Ok(output)
}

#[cfg(test)]
mod tests {
    use crate::common_test::tests::vecs_match;

    use super::*;
    use indoc::indoc;

    #[test]
    fn test_parse_for_team_trims_header() -> Result<(), Box<dyn Error>> {
        let codeownership_file = indoc! {"
            # STOP! - DO NOT EDIT THIS FILE MANUALLY
            # This file was automatically generated by \"bin/codeownership validate\".
            #
            # CODEOWNERS is used for GitHub to suggest code/file owners to various GitHub
            # teams. This is useful when developers create Pull Requests since the
            # code/file owner is notified. Reference GitHub docs for more details:
            # https://help.github.com/en/articles/about-code-owners


        "};

        let team_ownership = parse_for_team("@Bar".to_string(), codeownership_file)?;
        assert!(team_ownership.is_empty());
        Ok(())
    }

    #[test]
    fn test_parse_for_team_includes_owned_globs() -> Result<(), Box<dyn Error>> {
        let codeownership_file = indoc! {"
            # First Section
            /path/to/owned @Foo
            /path/to/not/owned @Bar

            # Last Section
            /another/owned/path @Foo
        "};

        let team_ownership = parse_for_team("@Foo".to_string(), codeownership_file)?;
        vecs_match(
            &team_ownership,
            &vec![
                TeamOwnership {
                    heading: "# First Section".to_string(),
                    globs: vec!["/path/to/owned".to_string()],
                },
                TeamOwnership {
                    heading: "# Last Section".to_string(),
                    globs: vec!["/another/owned/path".to_string()],
                },
            ],
        );
        Ok(())
    }

    #[test]
    fn test_parse_for_team_with_partial_team_match() -> Result<(), Box<dyn Error>> {
        let codeownership_file = indoc! {"
            # First Section
            /path/to/owned @Foo
            /path/to/not/owned @FooBar
        "};

        let team_ownership = parse_for_team("@Foo".to_string(), codeownership_file)?;
        vecs_match(
            &team_ownership,
            &vec![TeamOwnership {
                heading: "# First Section".to_string(),
                globs: vec!["/path/to/owned".to_string()],
            }],
        );
        Ok(())
    }

    #[test]
    fn test_parse_for_team_with_trailing_newlines() -> Result<(), Box<dyn Error>> {
        let codeownership_file = indoc! {"
            # First Section
            /path/to/owned @Foo

            # Last Section
            /another/owned/path @Foo



        "};

        let team_ownership = parse_for_team("@Foo".to_string(), codeownership_file)?;
        vecs_match(
            &team_ownership,
            &vec![
                TeamOwnership {
                    heading: "# First Section".to_string(),
                    globs: vec!["/path/to/owned".to_string()],
                },
                TeamOwnership {
                    heading: "# Last Section".to_string(),
                    globs: vec!["/another/owned/path".to_string()],
                },
            ],
        );
        Ok(())
    }

    #[test]
    fn test_parse_for_team_without_trailing_newline() -> Result<(), Box<dyn Error>> {
        let codeownership_file = indoc! {"
            # First Section
            /path/to/owned @Foo"};

        let team_ownership = parse_for_team("@Foo".to_string(), codeownership_file)?;
        vecs_match(
            &team_ownership,
            &vec![TeamOwnership {
                heading: "# First Section".to_string(),
                globs: vec!["/path/to/owned".to_string()],
            }],
        );
        Ok(())
    }

    #[test]
    fn test_parse_for_team_with_missing_section_header() -> Result<(), Box<dyn Error>> {
        let codeownership_file = indoc! {"
            # First Section
            /path/to/owned @Foo

            /another/owned/path @Foo
        "};

        let team_ownership = parse_for_team("@Foo".to_string(), codeownership_file);
        assert!(
            team_ownership
                .is_err_and(|e| e.to_string() == "CODEOWNERS out of date. Run `codeowners generate` to update the CODEOWNERS file")
        );
        Ok(())
    }

    #[test]
    fn test_parse_for_team_with_malformed_team_line() -> Result<(), Box<dyn Error>> {
        let codeownership_file = indoc! {"
            # First Section
            @Foo
        "};

        let team_ownership = parse_for_team("@Foo".to_string(), codeownership_file);
        assert!(
            team_ownership
                .is_err_and(|e| e.to_string() == "CODEOWNERS out of date. Run `codeowners generate` to update the CODEOWNERS file")
        );
        Ok(())
    }

    #[test]
    fn test_parse_for_team_with_invalid_file() -> Result<(), Box<dyn Error>> {
        let codeownership_file = indoc! {"
            # First Section
            # Second Section
            path/to/owned @Foo
        "};
        let team_ownership = parse_for_team("@Foo".to_string(), codeownership_file)?;
        vecs_match(
            &team_ownership,
            &vec![
                TeamOwnership {
                    heading: "# First Section".to_string(),
                    globs: vec![],
                },
                TeamOwnership {
                    heading: "# Second Section".to_string(),
                    globs: vec!["path/to/owned".to_string()],
                },
            ],
        );
        Ok(())
    }

    #[test]
    fn test_team_name_from_file_path_exact_match() -> Result<(), Box<dyn Error>> {
        let codeownership_file = indoc! {"
            # First Section
            /path/to/owned @Foo
        "};
        let team_name = team_name_from_file_path("path/to/owned", codeownership_file)?;
        assert_eq!(team_name, Some("@Foo".to_string()));
        Ok(())
    }

    #[test]
    fn test_team_name_from_file_path_glob_match() -> Result<(), Box<dyn Error>> {
        let codeownership_file = indoc! {"
            # First Section
            /path/to/owned/** @Foo
        "};
        let team_name = team_name_from_file_path("path/to/owned/file", codeownership_file)?;
        assert_eq!(team_name, Some("@Foo".to_string()));
        Ok(())
    }

    #[test]
    fn test_team_name_from_file_path_no_match() -> Result<(), Box<dyn Error>> {
        let codeownership_file = indoc! {"
            # First Section
        "};
        let team_name = team_name_from_file_path("path/to/owned/file", codeownership_file)?;
        assert_eq!(team_name, None);
        Ok(())
    }

    #[test]
    fn test_team_name_from_file_path_prioritize_lowest_match() -> Result<(), Box<dyn Error>> {
        let codeownership_file = indoc! {"
            # First Section
            /path/to/owned/file @Foo
            /path/to/owned/file @Bar
        "};
        let team_name = team_name_from_file_path("path/to/owned/file", codeownership_file)?;
        assert_eq!(team_name, Some("@Bar".to_string()));
        Ok(())
    }
}
